"""empty message

Revision ID: e1bbc5bcbbbf
Revises: 
Create Date: 2022-10-11 13:20:40.085354

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2

# revision identifiers, used by Alembic.
revision = 'e1bbc5bcbbbf'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('private_collections',
    sa.Column('_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('type', sa.Text(), nullable=False),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('temporal_extent_start', sa.DateTime(), nullable=True),
    sa.Column('temporal_extent_end', sa.DateTime(), nullable=True),
    sa.Column('spatial_extent', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('id', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('_id')
    )
    # op.create_index('idx_private_collections_spatial_extent', 'private_collections', ['spatial_extent'], unique=False, postgresql_using='gist')
    op.create_table('public_catalogs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('added_on', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('url')
    )
    op.create_table('public_collections',
    sa.Column('_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id', sa.Text(), nullable=False),
    sa.Column('type', sa.Text(), nullable=False),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('temporal_extent_start', sa.DateTime(), nullable=True),
    sa.Column('temporal_extent_end', sa.DateTime(), nullable=True),
    sa.Column('spatial_extent', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('parent_catalog', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['parent_catalog'], ['public_catalogs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('_id'),
    sa.UniqueConstraint('id', 'parent_catalog', name='_id_parent_catalog_uc')
    )
    # op.create_index('idx_public_collections_spatial_extent', 'public_collections', ['spatial_extent'], unique=False, postgresql_using='gist')
    op.create_table('stac_ingestion_status',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('time_started', sa.DateTime(), nullable=True),
    sa.Column('time_finished', sa.DateTime(), nullable=True),
    sa.Column('source_stac_api_url', sa.Text(), nullable=True),
    sa.Column('target_stac_api_url', sa.Text(), nullable=True),
    sa.Column('update', sa.Boolean(), nullable=True),
    sa.Column('newly_stored_collections_count', sa.Integer(), nullable=True),
    sa.Column('newly_stored_collections', sa.Text(), nullable=True),
    sa.Column('updated_collections_count', sa.Integer(), nullable=True),
    sa.Column('updated_collections', sa.Text(), nullable=True),
    sa.Column('newly_stored_items_count', sa.Integer(), nullable=True),
    sa.Column('updated_items_count', sa.Integer(), nullable=True),
    sa.Column('already_stored_items_count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['source_stac_api_url'], ['public_catalogs.url'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_stac_ingestion_status_source_stac_api_url'), 'stac_ingestion_status', ['source_stac_api_url'], unique=False)
    op.create_table('stored_search_parameters',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('bbox', sa.Text(), nullable=True),
    sa.Column('datetime', sa.Text(), nullable=True),
    sa.Column('collection', sa.Text(), nullable=True),
    sa.Column('used_search_parameters', sa.Text(), nullable=False),
    sa.Column('associated_catalog_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['associated_catalog_id'], ['public_catalogs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('used_search_parameters')
    )
    op.create_index(op.f('ix_stored_search_parameters_associated_catalog_id'), 'stored_search_parameters', ['associated_catalog_id'], unique=False)
    # op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('spatial_ref_sys',
    # sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.CheckConstraint('(srid > 0) AND (srid <= 998999)', name='spatial_ref_sys_srid_check'),
    # sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    # )
    op.drop_index(op.f('ix_stored_search_parameters_associated_catalog_id'), table_name='stored_search_parameters')
    op.drop_table('stored_search_parameters')
    op.drop_index(op.f('ix_stac_ingestion_status_source_stac_api_url'), table_name='stac_ingestion_status')
    op.drop_table('stac_ingestion_status')
    # op.drop_index('idx_public_collections_spatial_extent', table_name='public_collections', postgresql_using='gist')
    op.drop_table('public_collections')
    op.drop_table('public_catalogs')
    # op.drop_index('idx_private_collections_spatial_extent', table_name='private_collections', postgresql_using='gist')
    op.drop_table('private_collections')
    # ### end Alembic commands ###
